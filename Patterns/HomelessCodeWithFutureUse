    static Expression fromPrefixNotation(final String expr) {
        // TODO: Determine which algorithm is better between this and fromInfixNotation, then implement the lesser in terms of the greater.
        final Deque<String> strings = new ArrayDeque<>();
        /* Convert the string into a stack of strings which are each either an operator, or an operand. */
        Arrays.stream(expr.split("\\s+")).forEach(strings::push);

        final Deque<Expression> expressions = new ArrayDeque<>();
        while (!strings.isEmpty()) {
            final String str = strings.pop();
            if (str.matches(OPERATOR_PATTERN)) {
                final Operator<String> op = Operator.<String>from(str);
                /* Apply this operator to it's needed number of operands. */
                final List<Expression> operands = new ArrayList<>();
                for (int i = 0; i < op.getNumberOfOperands(); i++) {
                    operands.add(expressions.pop());
                }
                /* Add that resulting expression to the list. */
                expressions.push(Expression.from(op, operands.toArray(new Expression[operands.size()])));
            } else {
                expressions.push(new Scalar<>(str));
            }
        }

        return expressions.pop();
    }

    static Expression fromInfixNotation(final String expr) {
        // Pad parentheses so they can be parsed in tokens.
        final Scanner s = new Scanner(expr.replaceAll("\\(", " ( ").replaceAll("\\)", " ) "));

        final Deque<Expression> expressions = new ArrayDeque<>();
        final Deque<Operator> operators = new ArrayDeque<>();
        while (s.hasNext()) {
            final String str = s.next();
            if (str.matches(OPERATOR_PATTERN)) {
                operators.push(Operator.from(str));
            } else if (str.equals(")")) {
                final Operator op = operators.pop();
                final Deque<Expression> operands = new ArrayDeque<>();
                for (int i = 0; i < op.getNumberOfOperands(); ++i) {
                    operands.push(expressions.pop());
                }
                expressions.push(Expression.from(op, operands.toArray(new Expression[operands.size()])));
            } else {
                expressions.push(new Scalar<>(str));
            }
        }

        return expressions.pop();
    }
